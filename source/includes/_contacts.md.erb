## Contacts

A contact is any customer or vendor who appears on your invoices, credit notes, and expenses.

### The contact object

Attribute               | Type      | Description
------------------------|-----------|----------------------------------------------------------------------------
`id`                    | integer   | Unique identifier for the object.
`kind`                  | string    | The type of contact. Values are ``company` or `person`. Defaults to `company`.
`first_name`            | string    | The contact's first name. **Required**
`last_name`             | string    | The contact's last name. Empty when the contact is a `company`.
`tax_id`                | string    | Any tax identification number. Quaderno can validate tax IDs from the EU, United Kingdom, Switzerland, QuÃ©bec (Canada), Australia, and New Zealand.
`contact_person`        | string    | If the contact is a `company`, this is its contact person.
`street_line_1`         | string    | Address line 1 (Street address/PO Box).
`street_line_2`         | string    | Address line 2 (Apartment/Suite/Unit/Building).
`city`                  | string    | City/District/Suburb/Town/Village.
`postal_code`           | string    | ZIP or postal code.
`region`                | string    | Region, province or state.
`country`               | string    | 2-letter country code.
`phone_1`               | string    | The contact's phone number.
`email`                 | string    | The contact's email address. Multiple emails should be separated by commas. Maximum number of addresses allowed is 3.
`web`                   | string    | The contact's website. Validates format
`discount`              | decimal   | Default discount for this contact.
`language`              | string    | The contact's preferred language. Should be included in the translations list
`notes`                 | string    | Internal notes about the contact.

### Create a contact

> `POST /contacts.json`

```cURL
curl -u YOUR_API_KEY:x \
     -H 'Content-Type: application/json' \
     -X POST \
     -d '{"first_name":"Tony", "kind":"person", "contact_name":"Stark"}' \
     'https://ACCOUNT_NAME.quadernoapp.com/api/contacts.json'
```

```ruby
Quaderno::Contact.create({
    first_name: 'Tony',
    kind: 'person',
    contact_name: 'Stark'
})
```

```php
$contact = new QuadernoContact(array(
                                 'first_name' => 'Tony',
                                 'kind' => 'person',
                                 'contact_name' => 'Stark'));
$contact->save(); // Returns true (success) or false (error)
```

`POST`ing to `/contacts.json` will create a new contact from the parameters passed.

This will return `201 Created` and the current JSON representation of the contact if the creation was a success, along with the location of the new contact in the `url` field.

### Update a contact

> `PUT /contacts/CONTACT_ID.json`

```cURL
curl -u YOUR_API_KEY:x \
     -H 'Content-Type: application/json' \
     -X PUT \
     -d '{"first_name":"Anthony"}' \
     'https://ACCOUNT_NAME.quadernoapp.com/api/contacts/CONTACT_ID.json'
```

```ruby
Quaderno::Contact.update(
    CONTACT_ID, 
    {
        first_name: 'Mary',
        last_name: 'Smith'
    }
)
```

```php
$contact->first_name = 'Anthony';
$contact->save();
```

`PUT`ing to `/contacts/CONTACT_ID.json` will update the contact from the passed parameters.

This will return `200 OK` and a JSON representation of the contact if successful.

### Delete a contact

> `DELETE /contacts/CONTACT_ID.json`

```cURL
curl -u YOUR_API_KEY:x \
     -X DELETE
     'https://ACCOUNT_NAME.quadernoapp.com/api/contacts/CONTACT_ID.json'
```

```ruby
Quaderno::Contact.delete(CONTACT_ID)
```

```php
$contact->delete();
```

`DELETE`ing to `/contacts/CONTACT_ID.json` will delete the specified contact and returns `204 No Content` if successful.

### Retrieve a contact

> `GET /contacts/CONTACT_ID.json`

```cURL
curl -u YOUR_API_KEY:x \
     -X GET 'https://ACCOUNT_NAME.quadernoapp.com/api/contacts/CONTACT_ID.json'
```

```ruby
Quaderno::Contact.find(CONTACT_ID)
```

```php
$contact = QuadernoContact::find(CONTACT_ID); // Returns a QuadernoContact
```

```json
{
    "id":"456987213",
    "kind":"person",
    "first_name":"Sheldon",
    "last_name":"Cooper",
    "full_name":"Sheldon Cooper",
    "street_line_1":"2311 N. Los Robles Avenue",
    "street_line_2":"",
    "postal_code":"91104",
    "city":"Pasadena",
    "region":"CA",
    "country":"US",
    "phone_1":"",
    "email":"s.cooperphd@yahoo.com",
    "web":"",
    "discount":null,
    "tax_id":"",
    "language":"EN",
    "notes":"",
    "secure_id":"th3p3rm4l1nk",
    "permalink":"https://ACCOUNT_NAME.quadernoapp.com/billing/th3p3rm4l1nk",
    "url":"https://ACCOUNT_NAME.quadernoapp.com/api/contacts/456987213"
}
```

`GET`ting from `/contacts/CONTACT_ID.json` will get you that specific contact.

<aside class="notice">
If you've connected Quaderno and Stripe, you can also `GET /stripe/customers/STRIPE_CUSTOMER_ID.json` to get the Quaderno contact for a Stripe customer.
</aside>

### Retrieve a contact by processor ID

> `GET /PAYMENT_GATEWAY/customers/PAYMENT_GATEWAY_CUSTOMER_ID.json`

```cURL
curl -u YOUR_API_KEY:x \
     -X GET 'https://ACCOUNT_NAME.quadernoapp.com/api/PAYMENT_GATEWAY/customers/PAYMENT_GATEWAY_CUSTOMER_ID.json'
```

```ruby
Quaderno::Contact.retrieve_customer(STRIPE_CUSTOMER_ID, 'stripe')
```

```php
```

```json
{
    "id":"456987213",
    "kind":"person",
    "first_name":"Sheldon",
    "last_name":"Cooper",
    "full_name":"Sheldon Cooper",
    "street_line_1":"2311 N. Los Robles Avenue",
    "street_line_2":"",
    "postal_code":"91104",
    "city":"Pasadena",
    "region":"CA",
    "country":"US",
    "phone_1":"",
    "email":"s.cooperphd@yahoo.com",
    "web":"",
    "discount":null,
    "tax_id":"",
    "language":"EN",
    "notes":"",
    "secure_id":"th3p3rm4l1nk",
    "permalink":"https://ACCOUNT_NAME.quadernoapp.com/billing/th3p3rm4l1nk",
    "url":"https://ACCOUNT_NAME.quadernoapp.com/api/contacts/456987213"
}
```

`GET`ting from `/PAYMENT_GATEWAY/customers/PAYMENT_GATEWAY_CUSTOMER_ID.json` will get you that specific contact by using their ID with the payment gateway they were created with.

Supported gateways:

- [Stripe](https://stripe.com/)
- [GoCardless](https://gocardless.com/)
- [PayPal](https://www.paypal.com)
- [Braintree](https://www.braintreepayments.com/)

More are added frequently, so check back!

### List all contacts

> `GET /contacts.json`

```cURL
curl -u YOUR_API_KEY:x \
     -X GET 'https://ACCOUNT_NAME.quadernoapp.com/api/contacts.json'
```

```ruby
Quaderno::Contact.all()
```

```php
$contacts = QuadernoContact::find(); // Returns an array of QuadernoContact
```

```json
[
  {
    "id":"456987213",
    "kind":"person",
    "first_name":"Sheldon",
    "last_name":"Cooper",
    "full_name":"Sheldon Cooper",
    "street_line_1":"2311 N. Los Robles Avenue",
    "street_line_2":"",
    "postal_code":"91104",
    "city":"Pasadena",
    "region":"CA",
    "country":"US",
    "phone_1":"",
    "email":"s.cooperphd@yahoo.com",
    "web":"",
    "discount":null,
    "tax_id":"",
    "language":"EN",
    "notes":"",
    "secure_id":"th3p3rm4l1nk",
    "permalink":"https://ACCOUNT_NAME.quadernoapp.com/billing/th3p3rm4l1nk",
    "url":"https://ACCOUNT_NAME.quadernoapp.com/api/contacts/456987213"
  },
  {
    "id":"456982365",
    "kind":"company",
    "full_name":"Apple Inc.",
    "street_line_1":"1 Infinite Loop",
    "street_line_2":"",
    "postal_code":"95014",
    "city":"Cupertino",
    "region":"CA",
    "country":"US",
    "phone_1":"",
    "email":"info@apple.com",
    "web":"http://apple.com",
    "discount":null,
    "tax_id":"",
    "language":"EN",
    "notes":"",
    "secure_id":"4n0th3rp3rm4l1nk",
    "permalink":"https://ACCOUNT_NAME.quadernoapp.com/billing/4n0th3rp3rm4l1nk",
    "url":"https://ACCOUNT_NAME.quadernoapp.com/api/contacts/456982365"
  }
]
```

`GET`ting from `/contacts.json` will return all the user's contacts.

You can filter the results by full name, email or tax ID by passing the `q` parameter in the URL as a query string, like `?q=KEYWORD`.
